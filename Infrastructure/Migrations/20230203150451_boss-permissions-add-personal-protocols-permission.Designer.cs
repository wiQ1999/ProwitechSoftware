// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ProwitechDbContext))]
    [Migration("20230203150451_boss-permissions-add-personal-protocols-permission")]
    partial class bosspermissionsaddpersonalprotocolspermission
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Infrastructure.Models.Domain.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingAddressId");

                    b.HasIndex("PropertyManagerId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.BuildingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CoordinateType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BuildingAddresses");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.FullAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingAddressId");

                    b.HasIndex("PropertyAddressId");

                    b.ToTable("FullAddresses");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionProtocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("A_01_Gazomierz_umiejscowienie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_04_Gazomierz_usytuowanie_w_stosunku_do_1_go_odbiornika")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_05_Gazomierz_usytuowanie_w_stosunku_do_licznika_energii_elektr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_06_Gazomierz_kurek_przed_gazomierzem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_10_Przewody_przebieg_inst_gaz_przez_pokoje")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_11_Przewody_pion_inst_gaz_w_mieszkaniu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_12_Prawidlowosc_kuchenka_gazowa_typ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_13_Prawidlowosc_kuchenka_gazowa_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_14_Prawidlowosc_kuchenka_gazowa_podlaczenie_rodzaj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_15_Prawidlowosc_kuchenka_gazowa_podlaczenie_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_16_Prawidlowosc_kuchenka_gazowa_kurek_odcinajacy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_17_Prawidlowosc_kuchenka_gazowa_odleglosc_od_okna")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_18_Prawidlowosc_gazowy_podgrzewacz_cwu_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_19_Prawidlowosc_gazowy_podgrzewacz_cwu_kurek_odcinajacy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_20_Prawidlowosc_gazowy_podgrzewacz_cwu_rura_spalinowa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_21_Prawidlowosc_terma_gazowa_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_22_Prawidlowosc_terma_gazowa_kurek_odcinajacy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_23_Prawidlowosc_terma_gazowa_rura_spalinowa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_24_Prawidlowosc_kociol_co_z_kurkiem_i_rura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_25_Kubatura_warunku_techniczne")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_32_Wyniki_stan_szczelnosci")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("B_A_02_Gazomierz_szafka_wentylowana")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_03_Gazomierz_szczelnosc")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_26_Wentylacja_kuchnia")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_27_Wentylacja_lazienka")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_28_Wentylacja_inne_pomieszczenia")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_29_Wentylacja_nawiew_kuchnia")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_30_Wentylacja_nawiew_lazienka")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_31_Wentylacja_nawiew_Zet_w_pomieszczeniu_z_kotlem")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_33_Wyniki_instalacja_wymaga_usuniecia_nieszczelnosci")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_34_Propan_butan")
                        .HasColumnType("bit");

                    b.Property<string>("Inne_uwagi")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid>("InspectedPropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InspectionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InspectionPerformerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InspectionTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("M_A_07_Przewody_rodzaj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("M_A_08_Przewody_przebieg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("M_A_09_Przewody_sposob_prowadzenia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InspectedPropertyId");

                    b.HasIndex("InspectionPerformerId");

                    b.HasIndex("InspectionTaskId");

                    b.HasIndex("ResidentId");

                    b.ToTable("InspectionProtocols");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaskDelegatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskPerformerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("TaskDelegatorId");

                    b.HasIndex("TaskPerformerId");

                    b.ToTable("InspectionTasks");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Create")
                        .HasColumnType("bit");

                    b.Property<bool?>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Update")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8afbbc04-3b36-4196-a85b-a28352bab172"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("95a14e4e-5a9c-4f59-897a-9ffe8f053672"),
                            Source = "Roles",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("7da85c2d-cb61-4ce3-ba1f-a199c826a67f"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("95a14e4e-5a9c-4f59-897a-9ffe8f053672"),
                            Source = "Users",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("46c4d209-a68d-467f-9d2a-e0e1992a0eb4"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("95a14e4e-5a9c-4f59-897a-9ffe8f053672"),
                            Source = "Permissions",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("c729ebda-578c-446c-a843-2e3192ca0abf"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Source = "Roles",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("6debf06e-f310-4cdd-8c4d-1985adbdd38c"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Source = "Users",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("a74f7a64-40aa-4f96-a5fa-7125b286cc27"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Source = "Permissions",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("afdbf3a1-f259-4f69-9d78-a35a3fe62732"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Source = "Buildings",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("1a0e6f35-c395-4122-a444-67b7c28fd63b"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Source = "RealProperties",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("34c3762f-8905-416c-9d2f-d000ae3317af"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Source = "BuildingAddresses",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("dd509f9c-a240-447c-b1e6-747aa6fd9ace"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Source = "PropertyManagers",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("3dde2c01-3777-4a07-917b-d0caabee973d"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Source = "InspectionTasks",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("681f04db-628f-4ec4-97d3-007de489c69f"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Source = "AllInspectionProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("91118a63-2e23-4320-b0df-54b4dfcaf28b"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Source = "PersonalProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("f3aad585-f2a4-42a1-bb69-ae49aff567af"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            RoleId = new Guid("f224a458-dcbf-430b-9739-a272db5b8fe4"),
                            Source = "InspectionTasks",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("c5ce62d7-97d9-4a4f-b2dd-59c26b2ec85b"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("f224a458-dcbf-430b-9739-a272db5b8fe4"),
                            Source = "PersonalProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("fc53dd59-0ac6-4d0a-b98b-a54ac0cfec57"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "InspectionTasks",
                            Update = true,
                            UserId = new Guid("fffbf755-8169-46f0-8b36-d3666ffed5ff")
                        },
                        new
                        {
                            Id = new Guid("92d02646-2a08-490b-9598-a974f529400f"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            Source = "PersonalProtocols",
                            Update = true,
                            UserId = new Guid("fffbf755-8169-46f0-8b36-d3666ffed5ff")
                        },
                        new
                        {
                            Id = new Guid("a05031f1-5a5f-485b-bac7-1392592a3c0c"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "InspectionTasks",
                            Update = true,
                            UserId = new Guid("c3930eb7-c7aa-4c53-9d3e-863e7173a12a")
                        },
                        new
                        {
                            Id = new Guid("bf3bfd43-1bf8-4df5-acef-fe7605686ff1"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            Source = "PersonalProtocols",
                            Update = true,
                            UserId = new Guid("c3930eb7-c7aa-4c53-9d3e-863e7173a12a")
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaircaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyAddresses");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FullAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FullAddressId");

                    b.ToTable("PropertyManagers");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.RealProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("PropertyAddressId");

                    b.ToTable("RealProperties");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Resident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95a14e4e-5a9c-4f59-897a-9ffe8f053672"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452"),
                            Name = "Szef"
                        },
                        new
                        {
                            Id = new Guid("f224a458-dcbf-430b-9739-a272db5b8fe4"),
                            Name = "Pracownik"
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f387f845-13bf-4e19-a09d-b43e226ba95b"),
                            Email = "",
                            FirstName = "admin",
                            LastName = "",
                            Login = "admin",
                            Password = "AQAAAAIAAYagAAAAEGOIc8FoEVTKWKHhXnijhzbk7FlRMCTwVFfp9coaSaRUX33xXHANIAMZShCAgTxqGw==",
                            PhoneNumber = "",
                            RoleId = new Guid("95a14e4e-5a9c-4f59-897a-9ffe8f053672")
                        },
                        new
                        {
                            Id = new Guid("4f08cc14-1181-4343-a6da-41ddb71c8377"),
                            Email = "k.tumiel@gmail.com",
                            FirstName = "Krzysztof",
                            LastName = "Tumiel",
                            Login = "boss",
                            Password = "AQAAAAIAAYagAAAAEJg0oWoNU5jc8XhnSYJOT4pmwz3kf6+1zl4hyFeh5NZhQScOWwSdTGKjXtCf7xPfMQ==",
                            PhoneNumber = "123 456 789",
                            RoleId = new Guid("674870f0-b39f-43dd-bcd2-b3f2f0bb2452")
                        },
                        new
                        {
                            Id = new Guid("74cbd864-03b1-44d8-bc5d-36959921297e"),
                            Email = "j.kowalski@gmail.com",
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            Login = "w1",
                            Password = "AQAAAAIAAYagAAAAEFwRGPUK+BjglP2KAcx5nFqHyzmnovpq08BBDs2JAOk1NSaDZedZaIFvz0v6YYycVg==",
                            PhoneNumber = "+48 321 654 987",
                            RoleId = new Guid("f224a458-dcbf-430b-9739-a272db5b8fe4")
                        },
                        new
                        {
                            Id = new Guid("fffbf755-8169-46f0-8b36-d3666ffed5ff"),
                            Email = "z.pietka@gmail.com",
                            FirstName = "Zdzisław",
                            LastName = "Piętka",
                            Login = "w2",
                            Password = "AQAAAAIAAYagAAAAEF0bjbyA6qg1V/F68F56dA6FE5aVlkSdjB0gAPHjzisGECT1pWB0LXPtFQyCqey8dg==",
                            PhoneNumber = "987654321",
                            RoleId = new Guid("f224a458-dcbf-430b-9739-a272db5b8fe4")
                        },
                        new
                        {
                            Id = new Guid("c3930eb7-c7aa-4c53-9d3e-863e7173a12a"),
                            Email = "m.wioslo@gmail.com",
                            FirstName = "Marek",
                            LastName = "Wiosło",
                            Login = "w3",
                            Password = "AQAAAAIAAYagAAAAEH4DH2BIBpwuODJcrhDiy6K8WXalowYQOjufWFy30CQ9NpxMAG37Br9Jskwv0sg2uQ==",
                            PhoneNumber = "+48 312645978",
                            RoleId = new Guid("f224a458-dcbf-430b-9739-a272db5b8fe4")
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Building", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.BuildingAddress", "BuildingAddress")
                        .WithMany()
                        .HasForeignKey("BuildingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.PropertyManager", "PropertyManager")
                        .WithMany("Buildings")
                        .HasForeignKey("PropertyManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BuildingAddress");

                    b.Navigation("PropertyManager");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.FullAddress", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.BuildingAddress", "BuildingAddress")
                        .WithMany()
                        .HasForeignKey("BuildingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.PropertyAddress", "PropertyAddress")
                        .WithMany()
                        .HasForeignKey("PropertyAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BuildingAddress");

                    b.Navigation("PropertyAddress");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionProtocol", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.RealProperty", "InspectedProperty")
                        .WithMany()
                        .HasForeignKey("InspectedPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.User", "InspectionPerformer")
                        .WithMany()
                        .HasForeignKey("InspectionPerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.InspectionTask", "InspectionTask")
                        .WithMany("InspectionProtocols")
                        .HasForeignKey("InspectionTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infrastructure.Models.Domain.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InspectedProperty");

                    b.Navigation("InspectionPerformer");

                    b.Navigation("InspectionTask");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionTask", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.User", "TaskDelegator")
                        .WithMany()
                        .HasForeignKey("TaskDelegatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infrastructure.Models.Domain.User", "TaskPerformer")
                        .WithMany()
                        .HasForeignKey("TaskPerformerId");

                    b.Navigation("Building");

                    b.Navigation("TaskDelegator");

                    b.Navigation("TaskPerformer");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Permission", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Infrastructure.Models.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyManager", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.FullAddress", "FullAddress")
                        .WithMany()
                        .HasForeignKey("FullAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FullAddress");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.RealProperty", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Building", "Building")
                        .WithMany("Properties")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.PropertyAddress", "PropertyAddress")
                        .WithMany()
                        .HasForeignKey("PropertyAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Building");

                    b.Navigation("PropertyAddress");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Building", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionTask", b =>
                {
                    b.Navigation("InspectionProtocols");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyManager", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
