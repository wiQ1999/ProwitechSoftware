// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ProwitechDbContext))]
    [Migration("20230211182251_seeds-for-property-managers-and-buildings")]
    partial class seedsforpropertymanagersandbuildings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Infrastructure.Models.Domain.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingAddressId");

                    b.HasIndex("PropertyManagerId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b92496f-1023-4ab5-a1d6-6c268dbef4dc"),
                            BuildingAddressId = new Guid("b099c6d5-8ea3-4e62-b4ce-6598098b6ae8"),
                            PropertyManagerId = new Guid("999c95ab-961c-483e-99a3-39b7afdbdeda"),
                            Type = "JEDNOLOKALOWY"
                        },
                        new
                        {
                            Id = new Guid("92e05e7e-24f0-49c1-ae42-bb7f026d970b"),
                            BuildingAddressId = new Guid("08f7a570-0e1e-4dd0-8e7b-8120e11e016b"),
                            Type = "JEDNOLOKALOWY"
                        },
                        new
                        {
                            Id = new Guid("1aa900aa-9b8a-4d14-adb3-2a86699617fe"),
                            BuildingAddressId = new Guid("b76d789c-3099-4fc0-b0a4-cbfc14bd00bd"),
                            PropertyManagerId = new Guid("58e8c95f-c6ee-40a7-8d50-a8a6ac69491b"),
                            Type = "WIELOLOKALOWY"
                        },
                        new
                        {
                            Id = new Guid("b0e08b36-79f9-4099-a397-f12d4edae37e"),
                            BuildingAddressId = new Guid("eb1dd6e6-2db3-4072-b1df-8102d0bd5e1b"),
                            PropertyManagerId = new Guid("58e8c95f-c6ee-40a7-8d50-a8a6ac69491b"),
                            Type = "WIELOLOKALOWY"
                        },
                        new
                        {
                            Id = new Guid("be4b1341-9039-487f-ad36-69e02ae96e93"),
                            BuildingAddressId = new Guid("b1c03a13-53bf-44e1-8005-1d557c7d6708"),
                            PropertyManagerId = new Guid("7ba09872-8840-4596-8cb6-d6dcab66210b"),
                            Type = "WIELOLOKALOWY"
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.BuildingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CoordinateType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BuildingAddresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4c4a7ea-5ed5-4c5d-af5f-c922bbadc8f8"),
                            BuildingNumber = "20",
                            CityName = "Poznań",
                            CoordinateType = "ROOFTOP",
                            Latitude = 52.411970400000001,
                            Longitude = 16.8960173,
                            PostalCode = "61-001",
                            StreetName = "Polna"
                        },
                        new
                        {
                            Id = new Guid("9575ade3-67cc-435a-8a57-074c353de1ac"),
                            BuildingNumber = "15A",
                            CityName = "Poznań",
                            CoordinateType = "ROOFTOP",
                            Latitude = 52.4172254,
                            Longitude = 16.897186300000001,
                            PostalCode = "60-541",
                            StreetName = "Szczepanowskiego"
                        },
                        new
                        {
                            Id = new Guid("4509bb78-90f3-4a0e-9b7d-596d53a114e2"),
                            BuildingNumber = "33",
                            CityName = "Poznań",
                            CoordinateType = "ROOFTOP",
                            Latitude = 52.460836,
                            Longitude = 16.924751100000002,
                            PostalCode = "61-001",
                            StreetName = "Jana Batorego"
                        },
                        new
                        {
                            Id = new Guid("b099c6d5-8ea3-4e62-b4ce-6598098b6ae8"),
                            BuildingNumber = "20",
                            CityName = "Poznań",
                            PostalCode = "62",
                            StreetName = "Polna"
                        },
                        new
                        {
                            Id = new Guid("08f7a570-0e1e-4dd0-8e7b-8120e11e016b"),
                            BuildingNumber = "56",
                            CityName = "Poznań",
                            CoordinateType = "ROOFTOP",
                            Latitude = 52.411970400000001,
                            Longitude = 16.8960173,
                            PostalCode = "61-001",
                            StreetName = "Smerfowa"
                        },
                        new
                        {
                            Id = new Guid("b76d789c-3099-4fc0-b0a4-cbfc14bd00bd"),
                            BuildingNumber = "15B",
                            CityName = "Poznań",
                            CoordinateType = "ROOFTOP",
                            Latitude = 52.417443400000003,
                            Longitude = 16.897134000000001,
                            PostalCode = "60-541",
                            StreetName = "Szczepanowskiego"
                        },
                        new
                        {
                            Id = new Guid("eb1dd6e6-2db3-4072-b1df-8102d0bd5e1b"),
                            BuildingNumber = "4",
                            CityName = "Poznań",
                            CoordinateType = "ROOFTOP",
                            Latitude = 52.4189875,
                            Longitude = 16.897530199999999,
                            PostalCode = "60-541",
                            StreetName = "Szczepanowskiego"
                        },
                        new
                        {
                            Id = new Guid("b1c03a13-53bf-44e1-8005-1d557c7d6708"),
                            BuildingNumber = "33",
                            CityName = "Poznań",
                            CoordinateType = "ROOFTOP",
                            Latitude = 52.460836,
                            Longitude = 16.924751100000002,
                            PostalCode = "61-001",
                            StreetName = "Jana Batorego"
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.FullAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingAddressId");

                    b.HasIndex("PropertyAddressId");

                    b.ToTable("FullAddresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1b53673-1028-4fec-af36-75d61fa659c3"),
                            BuildingAddressId = new Guid("e4c4a7ea-5ed5-4c5d-af5f-c922bbadc8f8")
                        },
                        new
                        {
                            Id = new Guid("652bff4c-9b5b-4a69-ba57-18f75d6db303"),
                            BuildingAddressId = new Guid("9575ade3-67cc-435a-8a57-074c353de1ac"),
                            PropertyAddressId = new Guid("12c690c4-0cc0-4038-abd1-556fef16864a")
                        },
                        new
                        {
                            Id = new Guid("a6c980b4-24cc-4e3c-8c7f-1cf67ba4d46a"),
                            BuildingAddressId = new Guid("4509bb78-90f3-4a0e-9b7d-596d53a114e2"),
                            PropertyAddressId = new Guid("4d52211d-39f9-46c0-ab11-8d2b9b98392d")
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionProtocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("A_01_Gazomierz_umiejscowienie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_04_Gazomierz_usytuowanie_w_stosunku_do_1_go_odbiornika")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_05_Gazomierz_usytuowanie_w_stosunku_do_licznika_energii_elektr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_06_Gazomierz_kurek_przed_gazomierzem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_10_Przewody_przebieg_inst_gaz_przez_pokoje")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_11_Przewody_pion_inst_gaz_w_mieszkaniu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_12_Prawidlowosc_kuchenka_gazowa_typ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_13_Prawidlowosc_kuchenka_gazowa_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_14_Prawidlowosc_kuchenka_gazowa_podlaczenie_rodzaj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_15_Prawidlowosc_kuchenka_gazowa_podlaczenie_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_16_Prawidlowosc_kuchenka_gazowa_kurek_odcinajacy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_17_Prawidlowosc_kuchenka_gazowa_odleglosc_od_okna")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_18_Prawidlowosc_gazowy_podgrzewacz_cwu_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_19_Prawidlowosc_gazowy_podgrzewacz_cwu_kurek_odcinajacy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_20_Prawidlowosc_gazowy_podgrzewacz_cwu_rura_spalinowa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_21_Prawidlowosc_terma_gazowa_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_22_Prawidlowosc_terma_gazowa_kurek_odcinajacy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_23_Prawidlowosc_terma_gazowa_rura_spalinowa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_24_Prawidlowosc_kociol_co_z_kurkiem_i_rura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_25_Kubatura_warunku_techniczne")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_32_Wyniki_stan_szczelnosci")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("B_A_02_Gazomierz_szafka_wentylowana")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_03_Gazomierz_szczelnosc")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_26_Wentylacja_kuchnia")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_27_Wentylacja_lazienka")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_28_Wentylacja_inne_pomieszczenia")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_29_Wentylacja_nawiew_kuchnia")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_30_Wentylacja_nawiew_lazienka")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_31_Wentylacja_nawiew_Zet_w_pomieszczeniu_z_kotlem")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_33_Wyniki_instalacja_wymaga_usuniecia_nieszczelnosci")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_34_Propan_butan")
                        .HasColumnType("bit");

                    b.Property<string>("Inne_uwagi")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid>("InspectedPropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InspectionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InspectionPerformerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InspectionTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("M_A_07_Przewody_rodzaj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("M_A_08_Przewody_przebieg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("M_A_09_Przewody_sposob_prowadzenia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InspectedPropertyId");

                    b.HasIndex("InspectionPerformerId");

                    b.HasIndex("InspectionTaskId");

                    b.HasIndex("ResidentId");

                    b.ToTable("InspectionProtocols");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaskDelegatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskPerformerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("TaskDelegatorId");

                    b.HasIndex("TaskPerformerId");

                    b.ToTable("InspectionTasks");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Create")
                        .HasColumnType("bit");

                    b.Property<bool?>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Update")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eeb2df81-d75e-474d-b4a4-287d07ac4d59"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Source = "Roles",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("b007c622-cef0-4cb0-b33f-c4fefe5f42a5"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Source = "Users",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("2bc89fb3-e84d-45f2-a222-fcd520e9d1ec"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Source = "Permissions",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("2316d28b-28d5-4423-bdf4-35a7cf0c3869"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Source = "Buildings",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("bffdd83e-58a4-4301-a5ab-f9d09d6775d2"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Source = "BuildingAddresses",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("77cb315f-a855-426b-9faf-afc5c77c916b"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Source = "AllInspectionProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("f52c774d-23eb-4006-af26-2361fd742759"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Source = "PersonalProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("8cdcff9a-ab3e-475e-99de-09b48a86b226"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Source = "InspectionTasks",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("a0e050f8-ba88-4f15-91d0-f300f04ac07d"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Source = "PropertyManagers",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("d775f5d9-efe6-4148-8163-7a4c7f2c9abd"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Source = "RealProperties",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("6f69b470-40a9-4ea3-81f4-754a7df73c20"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Source = "Roles",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("5d96c7b0-8aa7-4924-92d6-80f8b8989cdd"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Source = "Users",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("96eb7d64-667d-49a8-88e3-264a1c3e9f80"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Source = "Permissions",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("dd6bda52-7e48-4bcd-95b6-baf07e4289b1"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Source = "Buildings",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("3cde4536-6e46-49ca-99c8-ea99eadaeb80"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Source = "BuildingAddresses",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("117fc6d7-994b-4828-917a-aaa067ce2ee5"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Source = "AllInspectionProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("7219703e-db8b-4d0d-abab-4849e0a70980"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Source = "PersonalProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("f40d06a6-cc93-4aff-85b5-663276f84632"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Source = "InspectionTasks",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("f2794e13-e2c1-4b80-ae18-f975d4eb0bda"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Source = "PropertyManagers",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("01ad2f40-ad52-4cb0-9043-7b6119cd8043"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Source = "RealProperties",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("667d6c42-e27a-4ac6-a3c0-982b6b713dc1"),
                            Create = false,
                            Delete = false,
                            Read = false,
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Source = "Roles",
                            Update = false
                        },
                        new
                        {
                            Id = new Guid("cc15b7f7-fc6c-4b96-a600-040b852a85cb"),
                            Create = false,
                            Delete = false,
                            Read = false,
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Source = "Users",
                            Update = false
                        },
                        new
                        {
                            Id = new Guid("292d5e87-8d9d-41a5-be04-d3c0e1e73863"),
                            Create = false,
                            Delete = false,
                            Read = false,
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Source = "Permissions",
                            Update = false
                        },
                        new
                        {
                            Id = new Guid("9759ec6a-5cce-4139-ad7b-a08a2ffbe765"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Source = "Buildings",
                            Update = false
                        },
                        new
                        {
                            Id = new Guid("7a0f2e13-1acb-4c17-886f-77e27b6ed673"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Source = "BuildingAddresses",
                            Update = false
                        },
                        new
                        {
                            Id = new Guid("ca05cf92-4ae6-428b-bc06-2654b7cc4421"),
                            Create = false,
                            Delete = false,
                            Read = false,
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Source = "AllInspectionProtocols",
                            Update = false
                        },
                        new
                        {
                            Id = new Guid("13fdc375-e110-4853-b6d2-9838e686825f"),
                            Create = true,
                            Delete = false,
                            Read = true,
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Source = "PersonalProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("1e65ffdb-e851-4ad2-8013-3b74ccc28c12"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Source = "InspectionTasks",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("6fd9fe62-66ce-4265-b3ab-49d1302c66d5"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Source = "PropertyManagers",
                            Update = false
                        },
                        new
                        {
                            Id = new Guid("f4c731b0-d090-4d02-bc0d-b21c0eadb82a"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Source = "RealProperties",
                            Update = false
                        },
                        new
                        {
                            Id = new Guid("b44771e7-12fa-4ca8-bf23-8fd1dcb0ab30"),
                            Read = true,
                            Source = "Users",
                            UserId = new Guid("2db8290b-7405-4299-a529-59e0d3622bd0")
                        },
                        new
                        {
                            Id = new Guid("46f3cb90-4253-4aae-a6f1-e876efc66b06"),
                            Delete = true,
                            Source = "PersonalProtocols",
                            UserId = new Guid("2db8290b-7405-4299-a529-59e0d3622bd0")
                        },
                        new
                        {
                            Id = new Guid("fc7746b0-40c6-4099-b3e3-a4496efaaf30"),
                            Read = true,
                            Source = "Users",
                            UserId = new Guid("de84cf98-755c-408f-b9fe-b074e4cfced6")
                        },
                        new
                        {
                            Id = new Guid("5984f9ec-df85-4494-a003-2bf5877d792b"),
                            Read = true,
                            Source = "Roles",
                            UserId = new Guid("c34069a5-457e-4b98-8cca-db329283e1b3")
                        },
                        new
                        {
                            Id = new Guid("9439ecf6-9fb3-4777-a8a2-ef6fa5a9c26c"),
                            Read = true,
                            Source = "Users",
                            UserId = new Guid("c34069a5-457e-4b98-8cca-db329283e1b3")
                        },
                        new
                        {
                            Id = new Guid("3b066399-acb6-4701-8c5a-cefffb996e68"),
                            Source = "Buildings",
                            Update = true,
                            UserId = new Guid("c34069a5-457e-4b98-8cca-db329283e1b3")
                        },
                        new
                        {
                            Id = new Guid("3dca64f9-58b6-4267-b51a-c1a56ca118de"),
                            Source = "BuildingAddresses",
                            Update = true,
                            UserId = new Guid("c34069a5-457e-4b98-8cca-db329283e1b3")
                        },
                        new
                        {
                            Id = new Guid("5bd0bc67-3a25-4eb9-8dc8-1c4740708943"),
                            Delete = true,
                            Source = "PersonalProtocols",
                            UserId = new Guid("c34069a5-457e-4b98-8cca-db329283e1b3")
                        },
                        new
                        {
                            Id = new Guid("828a1e7f-411d-4ac7-98fd-789d399c211c"),
                            Create = true,
                            Source = "InspectionTasks",
                            UserId = new Guid("c34069a5-457e-4b98-8cca-db329283e1b3")
                        },
                        new
                        {
                            Id = new Guid("62510f75-84f9-472e-8775-772653c30826"),
                            Source = "PropertyManagers",
                            Update = true,
                            UserId = new Guid("c34069a5-457e-4b98-8cca-db329283e1b3")
                        },
                        new
                        {
                            Id = new Guid("2040fb10-e896-4ceb-bcda-7eed31bf7b78"),
                            Source = "RealProperties",
                            Update = true,
                            UserId = new Guid("c34069a5-457e-4b98-8cca-db329283e1b3")
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaircaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyAddresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12c690c4-0cc0-4038-abd1-556fef16864a"),
                            StaircaseNumber = "2",
                            VenueNumber = "4"
                        },
                        new
                        {
                            Id = new Guid("4d52211d-39f9-46c0-ab11-8d2b9b98392d"),
                            VenueNumber = "12"
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FullAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FullAddressId");

                    b.ToTable("PropertyManagers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("999c95ab-961c-483e-99a3-39b7afdbdeda"),
                            FullAddressId = new Guid("c1b53673-1028-4fec-af36-75d61fa659c3"),
                            Name = "Robert Nowaczyk",
                            PhoneNumber = "688233245"
                        },
                        new
                        {
                            Id = new Guid("58e8c95f-c6ee-40a7-8d50-a8a6ac69491b"),
                            FullAddressId = new Guid("652bff4c-9b5b-4a69-ba57-18f75d6db303"),
                            Name = "Joanna Zabłąńska",
                            PhoneNumber = "608884221"
                        },
                        new
                        {
                            Id = new Guid("7ba09872-8840-4596-8cb6-d6dcab66210b"),
                            FullAddressId = new Guid("a6c980b4-24cc-4e3c-8c7f-1cf67ba4d46a"),
                            Name = "Marek Wiosło",
                            PhoneNumber = "722646194"
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.RealProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("PropertyAddressId");

                    b.ToTable("RealProperties");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Resident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("6dfb8c6b-2140-416d-971f-552711006bde"),
                            Name = "Szef"
                        },
                        new
                        {
                            Id = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f"),
                            Name = "Pracownik"
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4e007bd-fbd3-48d5-89d6-0437000077fb"),
                            FirstName = "admin",
                            LastName = "admin",
                            Login = "admin",
                            Password = "AQAAAAIAAYagAAAAEJETWD4meuqEV6NdWCdFjpmX7jpC9e3bOUFSwvNvcLfKsmi+cNFB4NEYqzYivwQbzw==",
                            RoleId = new Guid("681ef117-76ee-41ab-80d9-e0e873bccb3f")
                        },
                        new
                        {
                            Id = new Guid("246e3d96-7b32-4534-8d2c-dde9787956d0"),
                            Email = "k.tumiel@gmail.com",
                            FirstName = "Krzysztof",
                            LastName = "Tumiel",
                            Login = "boss",
                            Password = "AQAAAAIAAYagAAAAEMdPEJy4zyG8O/UODx4jBEeh+kldknm701EE5ICuXBfwo1QXklV70gbQtECh910Ztw==",
                            PhoneNumber = "123 456 789",
                            RoleId = new Guid("6dfb8c6b-2140-416d-971f-552711006bde")
                        },
                        new
                        {
                            Id = new Guid("2db8290b-7405-4299-a529-59e0d3622bd0"),
                            Email = "j.kowalski@gmail.com",
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            Login = "w1",
                            Password = "AQAAAAIAAYagAAAAEDtydA6VE+TKZNXtjGVW/QkE8tzl3ZZaUrmLA/IWMB3FXHB1tg6ENlAr2owph8RPAg==",
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f")
                        },
                        new
                        {
                            Id = new Guid("de84cf98-755c-408f-b9fe-b074e4cfced6"),
                            Email = "z.pietka@gmail.com",
                            FirstName = "Zdzisław",
                            LastName = "Piętka",
                            Login = "w2",
                            Password = "AQAAAAIAAYagAAAAEJ0nvhgUjaQH7+s/+RpDBIWNLF5eEtMUs6z74NchEfqG+EBjBbws3vg/n3sb71c/Vw==",
                            PhoneNumber = "987654321",
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f")
                        },
                        new
                        {
                            Id = new Guid("c34069a5-457e-4b98-8cca-db329283e1b3"),
                            Email = "m.wioslo@gmail.com",
                            FirstName = "Marek",
                            LastName = "Wiosło",
                            Login = "w3",
                            Password = "AQAAAAIAAYagAAAAEMewjmce4OKm5RmqCiAHVZtyTy6VSrr+k+Tn7s2nZxYhK2FWp+I2An2LwY4Wmn4cow==",
                            PhoneNumber = "+48 312645978",
                            RoleId = new Guid("2119bc54-5dc1-4bfb-a7c4-d7cd9a452e9f")
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Building", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.BuildingAddress", "BuildingAddress")
                        .WithMany()
                        .HasForeignKey("BuildingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.PropertyManager", "PropertyManager")
                        .WithMany("Buildings")
                        .HasForeignKey("PropertyManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BuildingAddress");

                    b.Navigation("PropertyManager");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.FullAddress", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.BuildingAddress", "BuildingAddress")
                        .WithMany()
                        .HasForeignKey("BuildingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.PropertyAddress", "PropertyAddress")
                        .WithMany()
                        .HasForeignKey("PropertyAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BuildingAddress");

                    b.Navigation("PropertyAddress");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionProtocol", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.RealProperty", "InspectedProperty")
                        .WithMany()
                        .HasForeignKey("InspectedPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.User", "InspectionPerformer")
                        .WithMany()
                        .HasForeignKey("InspectionPerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.InspectionTask", "InspectionTask")
                        .WithMany("InspectionProtocols")
                        .HasForeignKey("InspectionTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infrastructure.Models.Domain.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InspectedProperty");

                    b.Navigation("InspectionPerformer");

                    b.Navigation("InspectionTask");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionTask", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.User", "TaskDelegator")
                        .WithMany()
                        .HasForeignKey("TaskDelegatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infrastructure.Models.Domain.User", "TaskPerformer")
                        .WithMany()
                        .HasForeignKey("TaskPerformerId");

                    b.Navigation("Building");

                    b.Navigation("TaskDelegator");

                    b.Navigation("TaskPerformer");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Permission", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Infrastructure.Models.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyManager", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.FullAddress", "FullAddress")
                        .WithMany()
                        .HasForeignKey("FullAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FullAddress");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.RealProperty", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Building", "Building")
                        .WithMany("Properties")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.PropertyAddress", "PropertyAddress")
                        .WithMany()
                        .HasForeignKey("PropertyAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Building");

                    b.Navigation("PropertyAddress");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Building", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionTask", b =>
                {
                    b.Navigation("InspectionProtocols");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyManager", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
