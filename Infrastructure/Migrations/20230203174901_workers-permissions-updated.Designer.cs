// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ProwitechDbContext))]
    [Migration("20230203174901_workers-permissions-updated")]
    partial class workerspermissionsupdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Infrastructure.Models.Domain.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingAddressId");

                    b.HasIndex("PropertyManagerId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.BuildingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CoordinateType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BuildingAddresses");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.FullAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingAddressId");

                    b.HasIndex("PropertyAddressId");

                    b.ToTable("FullAddresses");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionProtocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("A_01_Gazomierz_umiejscowienie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_04_Gazomierz_usytuowanie_w_stosunku_do_1_go_odbiornika")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_05_Gazomierz_usytuowanie_w_stosunku_do_licznika_energii_elektr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_06_Gazomierz_kurek_przed_gazomierzem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_10_Przewody_przebieg_inst_gaz_przez_pokoje")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_11_Przewody_pion_inst_gaz_w_mieszkaniu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_12_Prawidlowosc_kuchenka_gazowa_typ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_13_Prawidlowosc_kuchenka_gazowa_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_14_Prawidlowosc_kuchenka_gazowa_podlaczenie_rodzaj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_15_Prawidlowosc_kuchenka_gazowa_podlaczenie_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_16_Prawidlowosc_kuchenka_gazowa_kurek_odcinajacy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_17_Prawidlowosc_kuchenka_gazowa_odleglosc_od_okna")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_18_Prawidlowosc_gazowy_podgrzewacz_cwu_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_19_Prawidlowosc_gazowy_podgrzewacz_cwu_kurek_odcinajacy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_20_Prawidlowosc_gazowy_podgrzewacz_cwu_rura_spalinowa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_21_Prawidlowosc_terma_gazowa_stan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_22_Prawidlowosc_terma_gazowa_kurek_odcinajacy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_23_Prawidlowosc_terma_gazowa_rura_spalinowa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_24_Prawidlowosc_kociol_co_z_kurkiem_i_rura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_25_Kubatura_warunku_techniczne")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("A_32_Wyniki_stan_szczelnosci")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("B_A_02_Gazomierz_szafka_wentylowana")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_03_Gazomierz_szczelnosc")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_26_Wentylacja_kuchnia")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_27_Wentylacja_lazienka")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_28_Wentylacja_inne_pomieszczenia")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_29_Wentylacja_nawiew_kuchnia")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_30_Wentylacja_nawiew_lazienka")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_31_Wentylacja_nawiew_Zet_w_pomieszczeniu_z_kotlem")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_33_Wyniki_instalacja_wymaga_usuniecia_nieszczelnosci")
                        .HasColumnType("bit");

                    b.Property<bool>("B_A_34_Propan_butan")
                        .HasColumnType("bit");

                    b.Property<string>("Inne_uwagi")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid>("InspectedPropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InspectionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InspectionPerformerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InspectionTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("M_A_07_Przewody_rodzaj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("M_A_08_Przewody_przebieg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("M_A_09_Przewody_sposob_prowadzenia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InspectedPropertyId");

                    b.HasIndex("InspectionPerformerId");

                    b.HasIndex("InspectionTaskId");

                    b.HasIndex("ResidentId");

                    b.ToTable("InspectionProtocols");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaskDelegatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskPerformerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("TaskDelegatorId");

                    b.HasIndex("TaskPerformerId");

                    b.ToTable("InspectionTasks");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Create")
                        .HasColumnType("bit");

                    b.Property<bool?>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Update")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("358bd333-e751-449d-b724-266d07436edd"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("78de5652-3818-496c-bff3-7d341c7aec1c"),
                            Source = "Roles",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("7ab2e5e3-e66d-4226-8b62-23783f75bf60"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("78de5652-3818-496c-bff3-7d341c7aec1c"),
                            Source = "Users",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("e63d55eb-dafd-44a0-8183-d96e1e6488a2"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("78de5652-3818-496c-bff3-7d341c7aec1c"),
                            Source = "Permissions",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("e7119637-0d5c-4223-94ed-78125da5d4af"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Source = "Roles",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("e2af1d75-08d6-48b1-86da-5424f4ea3c1d"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Source = "Users",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("ed1c3653-1949-4846-9b13-3ee52580b7ba"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Source = "Permissions",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("504f890c-cda2-4008-ad49-1097906ec93c"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Source = "Buildings",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("06f8eee3-2a97-451c-b3eb-3e65a4d42b64"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Source = "RealProperties",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("185b3978-dbbf-47a7-9b5d-b65d0b8b18e1"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Source = "BuildingAddresses",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("d1b53e0b-ab4a-4c27-930a-099c2cccc9f5"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Source = "PropertyManagers",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("7586dc7a-fa97-4725-82f2-e340254a4570"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Source = "InspectionTasks",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("526afc3d-64fa-4727-ab9f-db513f705ae9"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Source = "AllInspectionProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("d76959c5-16a4-4ba5-a649-76b4cd51d32a"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Source = "PersonalProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("9cfb6852-c3f9-4bb0-becd-b1cd7b408cb9"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            RoleId = new Guid("285710e0-b17d-4372-ac0e-ba1c350fa413"),
                            Source = "InspectionTasks",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("3dc2cd3d-47d6-4d30-ba43-e754ef7599bc"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            RoleId = new Guid("285710e0-b17d-4372-ac0e-ba1c350fa413"),
                            Source = "PersonalProtocols",
                            Update = true
                        },
                        new
                        {
                            Id = new Guid("4e9ee777-0456-414f-af33-eec110902b1f"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "BuildingAddresses",
                            Update = false,
                            UserId = new Guid("26f81b8c-23ca-4e8c-a7d5-ff521aa3a7c4")
                        },
                        new
                        {
                            Id = new Guid("3c9f88ac-6087-4cfd-8584-8c3f94d82919"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "Buildings",
                            Update = false,
                            UserId = new Guid("26f81b8c-23ca-4e8c-a7d5-ff521aa3a7c4")
                        },
                        new
                        {
                            Id = new Guid("f083276b-8e32-4a81-9ae0-1170d5410058"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            Source = "PersonalProtocols",
                            Update = true,
                            UserId = new Guid("26f81b8c-23ca-4e8c-a7d5-ff521aa3a7c4")
                        },
                        new
                        {
                            Id = new Guid("f6957675-5bc7-4285-9dd0-c9967f6626dd"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "InspectionTasks",
                            Update = true,
                            UserId = new Guid("26f81b8c-23ca-4e8c-a7d5-ff521aa3a7c4")
                        },
                        new
                        {
                            Id = new Guid("5a706e53-9877-44e1-b626-4ec36ce6d398"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "PropertyManagers",
                            Update = false,
                            UserId = new Guid("26f81b8c-23ca-4e8c-a7d5-ff521aa3a7c4")
                        },
                        new
                        {
                            Id = new Guid("4dd91f9e-3af6-46f8-83dd-8004dada068b"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "RealProperties",
                            Update = false,
                            UserId = new Guid("26f81b8c-23ca-4e8c-a7d5-ff521aa3a7c4")
                        },
                        new
                        {
                            Id = new Guid("c8d639b0-c81d-4d63-bf38-12006ee69017"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "Users",
                            Update = false,
                            UserId = new Guid("26f81b8c-23ca-4e8c-a7d5-ff521aa3a7c4")
                        },
                        new
                        {
                            Id = new Guid("7545d1ce-4aae-4dc4-ac50-a70ad13bf401"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "BuildingAddresses",
                            Update = false,
                            UserId = new Guid("56fbcd8f-7da1-4328-883c-518f83b2ba45")
                        },
                        new
                        {
                            Id = new Guid("d4a276d5-3666-4d8b-b32c-fd2f10f41a50"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "Buildings",
                            Update = false,
                            UserId = new Guid("56fbcd8f-7da1-4328-883c-518f83b2ba45")
                        },
                        new
                        {
                            Id = new Guid("e91e7d66-3836-4fb6-9fb5-23a486e6dc2d"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            Source = "PersonalProtocols",
                            Update = true,
                            UserId = new Guid("56fbcd8f-7da1-4328-883c-518f83b2ba45")
                        },
                        new
                        {
                            Id = new Guid("32ea8334-98cf-4d36-b1af-431f5eb0a2fa"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "InspectionTasks",
                            Update = true,
                            UserId = new Guid("56fbcd8f-7da1-4328-883c-518f83b2ba45")
                        },
                        new
                        {
                            Id = new Guid("c1dd4c6c-d94a-4a08-9a71-59a1eac32a67"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "PropertyManagers",
                            Update = false,
                            UserId = new Guid("56fbcd8f-7da1-4328-883c-518f83b2ba45")
                        },
                        new
                        {
                            Id = new Guid("b79cad47-a245-4665-b649-245561dacc1e"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "RealProperties",
                            Update = false,
                            UserId = new Guid("56fbcd8f-7da1-4328-883c-518f83b2ba45")
                        },
                        new
                        {
                            Id = new Guid("8c1e85ca-62dd-4545-8473-8618664ead08"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "Users",
                            Update = false,
                            UserId = new Guid("56fbcd8f-7da1-4328-883c-518f83b2ba45")
                        },
                        new
                        {
                            Id = new Guid("e7d05963-2e80-48ef-894d-101852b1d83b"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "BuildingAddresses",
                            Update = false,
                            UserId = new Guid("386a9595-2d97-4bcf-8d5d-193c97371fb1")
                        },
                        new
                        {
                            Id = new Guid("5adc9a5f-09da-4187-8e92-8232ad7daef3"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "Buildings",
                            Update = false,
                            UserId = new Guid("386a9595-2d97-4bcf-8d5d-193c97371fb1")
                        },
                        new
                        {
                            Id = new Guid("b83526a9-65be-4003-891a-b5d9a11ccdd4"),
                            Create = true,
                            Delete = true,
                            Read = true,
                            Source = "PersonalProtocols",
                            Update = true,
                            UserId = new Guid("386a9595-2d97-4bcf-8d5d-193c97371fb1")
                        },
                        new
                        {
                            Id = new Guid("01fd8d9d-b1de-48c4-b501-25d1b31ea7d8"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "InspectionTasks",
                            Update = true,
                            UserId = new Guid("386a9595-2d97-4bcf-8d5d-193c97371fb1")
                        },
                        new
                        {
                            Id = new Guid("230dad86-8ea9-4492-9ead-62f143cad6c4"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "PropertyManagers",
                            Update = false,
                            UserId = new Guid("386a9595-2d97-4bcf-8d5d-193c97371fb1")
                        },
                        new
                        {
                            Id = new Guid("462afa39-52a8-49d4-8885-a5177561fd45"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "RealProperties",
                            Update = false,
                            UserId = new Guid("386a9595-2d97-4bcf-8d5d-193c97371fb1")
                        },
                        new
                        {
                            Id = new Guid("cc9e682b-71e0-417e-ae4c-c5fb449543d6"),
                            Create = false,
                            Delete = false,
                            Read = true,
                            Source = "Users",
                            Update = false,
                            UserId = new Guid("386a9595-2d97-4bcf-8d5d-193c97371fb1")
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaircaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyAddresses");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FullAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FullAddressId");

                    b.ToTable("PropertyManagers");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.RealProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("PropertyAddressId");

                    b.ToTable("RealProperties");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Resident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78de5652-3818-496c-bff3-7d341c7aec1c"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e"),
                            Name = "Szef"
                        },
                        new
                        {
                            Id = new Guid("285710e0-b17d-4372-ac0e-ba1c350fa413"),
                            Name = "Pracownik"
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4044fcd-09fa-4b71-bc9f-2c8876e3dff8"),
                            Email = "",
                            FirstName = "admin",
                            LastName = "",
                            Login = "admin",
                            Password = "AQAAAAIAAYagAAAAEDljw4sISwsWP8r8gR9SW6Tl4LsyIVsZ/wUOFbRcZpERwtGWB8Z+NeOdvEgZq6zRXQ==",
                            PhoneNumber = "",
                            RoleId = new Guid("78de5652-3818-496c-bff3-7d341c7aec1c")
                        },
                        new
                        {
                            Id = new Guid("377a3576-01f6-4d0f-b526-809df29c449e"),
                            Email = "k.tumiel@gmail.com",
                            FirstName = "Krzysztof",
                            LastName = "Tumiel",
                            Login = "boss",
                            Password = "AQAAAAIAAYagAAAAEBwlz9s9MPknlHchQ2XRNUeG3hfhkV3cuXoCprDKsBo9sQbKTLHbcrlGxAjch4lSLQ==",
                            PhoneNumber = "123 456 789",
                            RoleId = new Guid("17996ef3-d75d-4660-855c-c2a013041f5e")
                        },
                        new
                        {
                            Id = new Guid("26f81b8c-23ca-4e8c-a7d5-ff521aa3a7c4"),
                            Email = "j.kowalski@gmail.com",
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            Login = "w1",
                            Password = "AQAAAAIAAYagAAAAEDeFf8Y3TUY7IDvaP04NWdHYm41py2+qMl4Y6zezCiCflcL1JHP1IpOebJWaSBGy7w==",
                            PhoneNumber = "+48 321 654 987",
                            RoleId = new Guid("285710e0-b17d-4372-ac0e-ba1c350fa413")
                        },
                        new
                        {
                            Id = new Guid("56fbcd8f-7da1-4328-883c-518f83b2ba45"),
                            Email = "z.pietka@gmail.com",
                            FirstName = "Zdzisław",
                            LastName = "Piętka",
                            Login = "w2",
                            Password = "AQAAAAIAAYagAAAAEDDjafDyTJo7lZfqRHAtBtFUXzuljt2/qdHnqwQlMwqftoQ4QjN0EFOYpgkp6HZ9/A==",
                            PhoneNumber = "987654321",
                            RoleId = new Guid("285710e0-b17d-4372-ac0e-ba1c350fa413")
                        },
                        new
                        {
                            Id = new Guid("386a9595-2d97-4bcf-8d5d-193c97371fb1"),
                            Email = "m.wioslo@gmail.com",
                            FirstName = "Marek",
                            LastName = "Wiosło",
                            Login = "w3",
                            Password = "AQAAAAIAAYagAAAAEP5tKnLwHlO8BC7R1L8IxeQrXutX5E8OoXMUO1iKGMOEZsQ7Znjyeos099HEZEkabA==",
                            PhoneNumber = "+48 312645978",
                            RoleId = new Guid("285710e0-b17d-4372-ac0e-ba1c350fa413")
                        });
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Building", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.BuildingAddress", "BuildingAddress")
                        .WithMany()
                        .HasForeignKey("BuildingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.PropertyManager", "PropertyManager")
                        .WithMany("Buildings")
                        .HasForeignKey("PropertyManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BuildingAddress");

                    b.Navigation("PropertyManager");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.FullAddress", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.BuildingAddress", "BuildingAddress")
                        .WithMany()
                        .HasForeignKey("BuildingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.PropertyAddress", "PropertyAddress")
                        .WithMany()
                        .HasForeignKey("PropertyAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BuildingAddress");

                    b.Navigation("PropertyAddress");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionProtocol", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.RealProperty", "InspectedProperty")
                        .WithMany()
                        .HasForeignKey("InspectedPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.User", "InspectionPerformer")
                        .WithMany()
                        .HasForeignKey("InspectionPerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.InspectionTask", "InspectionTask")
                        .WithMany("InspectionProtocols")
                        .HasForeignKey("InspectionTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infrastructure.Models.Domain.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InspectedProperty");

                    b.Navigation("InspectionPerformer");

                    b.Navigation("InspectionTask");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionTask", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.User", "TaskDelegator")
                        .WithMany()
                        .HasForeignKey("TaskDelegatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infrastructure.Models.Domain.User", "TaskPerformer")
                        .WithMany()
                        .HasForeignKey("TaskPerformerId");

                    b.Navigation("Building");

                    b.Navigation("TaskDelegator");

                    b.Navigation("TaskPerformer");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Permission", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Infrastructure.Models.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyManager", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.FullAddress", "FullAddress")
                        .WithMany()
                        .HasForeignKey("FullAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FullAddress");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.RealProperty", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Building", "Building")
                        .WithMany("Properties")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.PropertyAddress", "PropertyAddress")
                        .WithMany()
                        .HasForeignKey("PropertyAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Building");

                    b.Navigation("PropertyAddress");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Building", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.InspectionTask", b =>
                {
                    b.Navigation("InspectionProtocols");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.PropertyManager", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
